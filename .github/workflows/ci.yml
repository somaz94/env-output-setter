name: Continuous Integration
on:
  pull_request:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/workflows/**'
      - '**/*.md'
  workflow_dispatch:

permissions:
  contents: write
  
jobs:
  build-and-push-docker:
    name: Build and Push Docker
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5001:5000
    env:
      TEST_TAG: localhost:5001/actions/env-output-setter:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 10

      - name: Configure Git Safe Directory
        run: git config --global --add safe.directory ${{ github.workspace }}

      - name: Setup Docker BuildX
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: network=host

      - name: Build the Container
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.TEST_TAG }}

      # - name: Run the Container
      #   env:
      #     ENV_KEY: test1,test2
      #     ENV_VALUE: somaz,gomaz
      #     OUTPUT_KEY: test1,test2
      #     OUTPUT_VALUE: zomaz,xomae
      #   run: |
      #     docker run \
      #     --env ENV_KEY="${{ env.ENV_KEY }}" \
      #     --env ENV_VALUE="${{ env.ENV_VALUE }}" \
      #     --env OUTPUT_KEY="${{ env.OUTPUT_KEY }}" \
      #     --env OUTPUT_VALUE="${{ env.OUTPUT_VALUE }}" \
      #     --volume ${{ github.workspace }}:/app \
      #     --rm ${{ env.TEST_TAG }}

  test-action:
    name: Test env-output-setter
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 10

      - name: Configure Git Safe Directory
        run: git config --global --add safe.directory ${{ github.workspace }}

      - name: Test Local Action
        id: set_variables
        uses: ./
        with:
          env_key: test1,test2
          env_value: somaz,gomaz
          output_key: test1,test2
          output_value: zomaz,xomae

      - name: Display Individual Environment Variables
        run: |
          echo "Displaying individual environment variables:"
          echo "test1: ${{ env.test1 }}"
          echo "test2: ${{ env.test2 }}"
          echo "TEST1: ${{ steps.set_variables.outputs.test1 }}"
          echo "TEST2: ${{ steps.set_variables.outputs.test2 }}"

  test-action-v2:
    name: Test env-output-setter v2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 10

      - name: Configure Git Safe Directory
        run: git config --global --add safe.directory ${{ github.workspace }}

      - name: Set Environment and Output Variables
        id: set_variables
        uses: ./
        with:
          # 기본 키-값 설정
          env_key: test1:test2
          env_value: somaz:gomaz
          output_key: test1:test2
          output_value: zomaz:xomae
          
          # 새로운 옵션들 활용
          delimiter: ':' # 기본값이지만 예시로 명시
          fail_on_empty: true # 빈 값 있으면 실패
          trim_whitespace: true # 자동으로 공백 제거
          case_sensitive: true # 키 대소문자 구분
          error_on_duplicate: true # 중복 키 에러

      - name: Display Set Variables
        run: |
          echo "Env:"
          echo "test1: ${{ env.test1 }}"
          echo "test2: ${{ env.test2 }}"
          
          echo -e "\nOutputs:"
          echo "test1: ${{ steps.set_variables.outputs.test1 }}"
          echo "test2: ${{ steps.set_variables.outputs.test2 }}"
          
          echo -e "\nAction Results:"
          echo "Variables Set: ${{ steps.set_variables.outputs.set_env_count }}"
          echo "Outputs Set: ${{ steps.set_variables.outputs.set_output_count }}"
          echo "Status: ${{ steps.set_variables.outputs.status }}"
          echo "Error (if any): ${{ steps.set_variables.outputs.error_message }}"

      # 에러 처리 예시
      - name: Check for Errors
        if: steps.set_variables.outputs.status == 'failure'
        run: |
          echo "Error occurred: ${{ steps.set_variables.outputs.error_message }}"
          exit 1

  test-action-v3:
    name: Test env-output-setter v3
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 10

      - name: Configure Git Safe Directory
        run: git config --global --add safe.directory ${{ github.workspace }}

      - name: Test Value Transformation and Masking
        id: set_variables
        uses: ./
        with:
          # Basic key-value settings
          env_key: API_KEY,USERNAME,PASSWORD,URL_PARAM
          env_value: secret123,admin,pass123,hello world
          output_key: STATUS,DEBUG_MODE,API_VERSION,ENCODED_URL
          output_value: active,true,v1.0,hello world

          # Value transformation options
          to_upper: true
          to_lower: false
          encode_url: true

          # Masking options
          mask_secrets: true
          mask_pattern: '(password|secret).*'

          # Other options
          delimiter: ','
          fail_on_empty: true
          trim_whitespace: true
          case_sensitive: true
          error_on_duplicate: true

      - name: Display Environment Variables
        run: |
          echo "Environment Variables:"
          echo "API_KEY: ${{ env.API_KEY }}"
          echo "USERNAME: ${{ env.USERNAME }}"
          echo "PASSWORD: ${{ env.PASSWORD }}"
          echo "URL_PARAM: ${{ env.URL_PARAM }}"

      - name: Display Outputs
        run: |
          echo "Outputs:"
          echo "STATUS: ${{ steps.set_variables.outputs.STATUS }}"
          echo "DEBUG_MODE: ${{ steps.set_variables.outputs.DEBUG_MODE }}"
          echo "API_VERSION: ${{ steps.set_variables.outputs.API_VERSION }}"
          echo "ENCODED_URL: ${{ steps.set_variables.outputs.ENCODED_URL }}"

      - name: Display Action Results
        run: |
          echo "Action Results:"
          echo "Variables Set: ${{ steps.set_variables.outputs.set_env_count }}"
          echo "Outputs Set: ${{ steps.set_variables.outputs.set_output_count }}"
          echo "Status: ${{ steps.set_variables.outputs.status }}"
          echo "Error (if any): ${{ steps.set_variables.outputs.error_message }}"

      # Error handling
      - name: Check for Errors
        if: steps.set_variables.outputs.status == 'failure'
        run: |
          echo "Error occurred: ${{ steps.set_variables.outputs.error_message }}"
          exit 1
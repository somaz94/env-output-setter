name: Continuous Integration
on:
  pull_request:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/workflows/**'
      - '**/*.md'
      - 'backup/**'
  workflow_dispatch:

permissions:
  contents: write
  
jobs:
  build-and-push-docker:
    name: Build and Push Docker
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5001:5000
    env:
      TEST_TAG: localhost:5001/actions/env-output-setter:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 10

      - name: Configure Git Safe Directory
        run: git config --global --add safe.directory ${{ github.workspace }}

      - name: Setup Docker BuildX
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: network=host

      - name: Build the Container
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.TEST_TAG }}

      # - name: Run the Container
      #   env:
      #     ENV_KEY: test1,test2
      #     ENV_VALUE: somaz,gomaz
      #     OUTPUT_KEY: test1,test2
      #     OUTPUT_VALUE: zomaz,xomae
      #   run: |
      #     docker run \
      #     --env ENV_KEY="${{ env.ENV_KEY }}" \
      #     --env ENV_VALUE="${{ env.ENV_VALUE }}" \
      #     --env OUTPUT_KEY="${{ env.OUTPUT_KEY }}" \
      #     --env OUTPUT_VALUE="${{ env.OUTPUT_VALUE }}" \
      #     --volume ${{ github.workspace }}:/app \
      #     --rm ${{ env.TEST_TAG }}

  test-action:
    name: Test env-output-setter
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 10

      - name: Configure Git Safe Directory
        run: git config --global --add safe.directory ${{ github.workspace }}

      - name: Test Local Action
        id: set_variables
        uses: ./
        with:
          env_key: test1,test2
          env_value: somaz,gomaz
          output_key: test1,test2
          output_value: zomaz,xomae

      - name: Display Individual Environment Variables
        run: |
          echo "Displaying individual environment variables:"
          echo "test1: ${{ env.test1 }}"
          echo "test2: ${{ env.test2 }}"
          echo "TEST1: ${{ steps.set_variables.outputs.test1 }}"
          echo "TEST2: ${{ steps.set_variables.outputs.test2 }}"

  test-multiline:
    name: Test Multiline Input
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Test Multiline
        id: test_multi
        uses: ./
        with:
          env_key: |
            MULTI_KEY1,
            MULTI_KEY2,
            MULTI_KEY3
          env_value: |
            first value,
            second value,
            third value
          output_key: |
            OUT_MULTI1,
            OUT_MULTI2,
            OUT_MULTI3
          output_value: |
            output one,
            output two,
            output three

      - name: Verify Multiline Results
        run: |
          echo "Environment Variables:"
          echo "MULTI_KEY1: ${{ env.MULTI_KEY1 }}"
          echo "MULTI_KEY2: ${{ env.MULTI_KEY2 }}"
          echo "MULTI_KEY3: ${{ env.MULTI_KEY3 }}"
          
          echo "Outputs:"
          echo "OUT_MULTI1: ${{ steps.test_multi.outputs.OUT_MULTI1 }}"
          echo "OUT_MULTI2: ${{ steps.test_multi.outputs.OUT_MULTI2 }}"
          echo "OUT_MULTI3: ${{ steps.test_multi.outputs.OUT_MULTI3 }}"

  test-action-v2:
    name: Test env-output-setter v2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 10

      - name: Configure Git Safe Directory
        run: git config --global --add safe.directory ${{ github.workspace }}

      - name: Set Environment and Output Variables
        id: set_variables
        uses: ./
        with:
          # 기본 키-값 설정
          env_key: test1:test2
          env_value: somaz:gomaz
          output_key: test1:test2
          output_value: zomaz:xomae
          
          # 새로운 옵션들 활용
          delimiter: ':' # 기본값이지만 예시로 명시
          fail_on_empty: true # 빈 값 있으면 실패
          trim_whitespace: true # 자동으로 공백 제거
          case_sensitive: true # 키 대소문자 구분
          error_on_duplicate: true # 중복 키 에러

      - name: Display Set Variables
        run: |
          echo "Env:"
          echo "test1: ${{ env.test1 }}"
          echo "test2: ${{ env.test2 }}"
          
          echo -e "\nOutputs:"
          echo "test1: ${{ steps.set_variables.outputs.test1 }}"
          echo "test2: ${{ steps.set_variables.outputs.test2 }}"
          
          echo -e "\nAction Results:"
          echo "Variables Set: ${{ steps.set_variables.outputs.set_env_count }}"
          echo "Outputs Set: ${{ steps.set_variables.outputs.set_output_count }}"
          echo "Status: ${{ steps.set_variables.outputs.status }}"
          echo "Error (if any): ${{ steps.set_variables.outputs.error_message }}"

      # 에러 처리 예시
      - name: Check for Errors
        if: steps.set_variables.outputs.status == 'failure'
        run: |
          echo "Error occurred: ${{ steps.set_variables.outputs.error_message }}"
          exit 1

  test-action-v3:
    name: Test env-output-setter v3
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 10

      - name: Configure Git Safe Directory
        run: git config --global --add safe.directory ${{ github.workspace }}

      - name: Test Value Transformation and Masking
        id: set_variables
        uses: ./
        with:
          # Basic key-value settings
          env_key: API_KEY,USERNAME,PASSWORD,URL_PARAM
          env_value: secret123,admin,pass123,hello world
          output_key: STATUS,DEBUG_MODE,API_VERSION,ENCODED_URL
          output_value: active,true,v1.0,hello world

          # Value transformation options
          to_upper: true
          to_lower: false
          encode_url: true

          # Masking options
          mask_secrets: true
          mask_pattern: '(password|secret).*'

          # Other options
          delimiter: ','
          fail_on_empty: true
          trim_whitespace: true
          case_sensitive: true
          error_on_duplicate: true

      - name: Display Environment Variables
        run: |
          echo "Environment Variables:"
          echo "API_KEY: ${{ env.API_KEY }}"
          echo "USERNAME: ${{ env.USERNAME }}"
          echo "PASSWORD: ${{ env.PASSWORD }}"
          echo "URL_PARAM: ${{ env.URL_PARAM }}"

      - name: Display Outputs
        run: |
          echo "Outputs:"
          echo "STATUS: ${{ steps.set_variables.outputs.STATUS }}"
          echo "DEBUG_MODE: ${{ steps.set_variables.outputs.DEBUG_MODE }}"
          echo "API_VERSION: ${{ steps.set_variables.outputs.API_VERSION }}"
          echo "ENCODED_URL: ${{ steps.set_variables.outputs.ENCODED_URL }}"

      - name: Display Action Results
        run: |
          echo "Action Results:"
          echo "Variables Set: ${{ steps.set_variables.outputs.set_env_count }}"
          echo "Outputs Set: ${{ steps.set_variables.outputs.set_output_count }}"
          echo "Status: ${{ steps.set_variables.outputs.status }}"
          echo "Error (if any): ${{ steps.set_variables.outputs.error_message }}"

      # Error handling
      - name: Check for Errors
        if: steps.set_variables.outputs.status == 'failure'
        run: |
          echo "Error occurred: ${{ steps.set_variables.outputs.error_message }}"
          exit 1

  test-action-v4:
    name: Test env-output-setter v4
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 10

      - name: Configure Git Safe Directory
        run: git config --global --add safe.directory ${{ github.workspace }}

      - name: Test New Features
        id: set_variables
        uses: ./
        with:
          # 멀티라인 및 특수문자 테스트 (구분자를 '::'로 변경)
          env_key: "MULTILINE_TEXT::MAX_LENGTH_TEST::EMPTY_VALUE"
          env_value: "Hello\nWorld::ThisIsAVeryLongTextThatShouldBeTruncated::   "
          output_key: "PROCESSED_TEXT::TRUNCATED_TEXT::ALLOWED_EMPTY"
          output_value: "First Line\nSecond Line::AnotherLongTextToTest::   "

          # 새로운 옵션들 테스트
          escape_newlines: true        # \n을 \\n으로 변환
          max_length: 10              # 값을 10자로 제한
          allow_empty: true           # 빈 값 허용
          
          # 기본 옵션들
          delimiter: '::'             # 쉼표 대신 '::'를 구분자로 사용
          trim_whitespace: true
          case_sensitive: true
          error_on_duplicate: true
          fail_on_empty: true
          debug_mode: true
      - name: Display Environment Variables
        run: |
          echo "Environment Variables:"
          echo "MULTILINE_TEXT: ${{ env.MULTILINE_TEXT }}"
          echo "MAX_LENGTH_TEST: ${{ env.MAX_LENGTH_TEST }}"
          echo "EMPTY_VALUE: '${{ env.EMPTY_VALUE }}'"

      - name: Display Outputs
        run: |
          echo "Outputs:"
          echo "PROCESSED_TEXT: ${{ steps.set_variables.outputs.PROCESSED_TEXT }}"
          echo "TRUNCATED_TEXT: ${{ steps.set_variables.outputs.TRUNCATED_TEXT }}"
          echo "ALLOWED_EMPTY: '${{ steps.set_variables.outputs.ALLOWED_EMPTY }}'"

      - name: Display Action Results
        run: |
          echo "Action Results:"
          echo "Variables Set: ${{ steps.set_variables.outputs.set_env_count }}"
          echo "Outputs Set: ${{ steps.set_variables.outputs.set_output_count }}"
          echo "Status: ${{ steps.set_variables.outputs.status }}"
          echo "Error (if any): ${{ steps.set_variables.outputs.error_message }}"

      # Error handling
      - name: Check for Errors
        if: steps.set_variables.outputs.status == 'failure'
        run: |
          echo "Error occurred: ${{ steps.set_variables.outputs.error_message }}"
          exit 1

  test-advanced-features:
    name: Test Advanced Features
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 10

      - name: Configure Git Safe Directory
        run: git config --global --add safe.directory ${{ github.workspace }}

      - name: Test JSON Support
        id: json_test
        uses: ./
        with:
          env_key: CONFIG_JSON|SIMPLE_VALUE
          env_value: '{"api_url":"https://api.example.com","timeout":30,"nested":{"key1":"value1","key2":123}}|simple_text'
          output_key: config_data|simple_output
          output_value: '{"api_url":"https://api.example.com","timeout":30,"nested":{"key1":"value1","key2":123}}|simple_text'
          
          # 구분자를 쉼표(,)에서 파이프(|)로 변경
          delimiter: '|'
          
          # 새로운 JSON 지원 기능 활성화
          json_support: true
          # 명시적으로 접두사 없이 설정
          group_prefix: ''
          
          # 기타 옵션
          fail_on_empty: true
          trim_whitespace: true
          debug_mode: true

      - name: Display JSON Processed Environment Variables
        run: |
          echo "Environment Variables:"
          echo "CONFIG_JSON: ${{ env.CONFIG_JSON }}"
          echo "CONFIG_JSON_api_url: ${{ env.CONFIG_JSON_api_url || 'Not Set' }}"
          echo "CONFIG_JSON_timeout: ${{ env.CONFIG_JSON_timeout || 'Not Set' }}"
          echo "CONFIG_JSON_nested_key1: ${{ env.CONFIG_JSON_nested_key1 || 'Not Set' }}"
          echo "CONFIG_JSON_nested_key2: ${{ env.CONFIG_JSON_nested_key2 || 'Not Set' }}"
          echo "SIMPLE_VALUE: ${{ env.SIMPLE_VALUE }}"

      - name: Test Export Outputs as Environment Variables
        id: export_test
        uses: ./
        with:
          env_key: ENV_ONLY_VAR
          env_value: env_value
          output_key: OUTPUT_VAR1,OUTPUT_VAR2
          output_value: output_value1,output_value2
          
          # 출력값을 환경 변수로 내보내기
          export_as_env: true
          
          # 기타 옵션
          delimiter: ','
          fail_on_empty: true
          debug_mode: true

      - name: Verify Export as Environment Variables
        run: |
          echo "Environment Variables:"
          echo "ENV_ONLY_VAR: ${{ env.ENV_ONLY_VAR }}"
          echo "OUTPUT_VAR1 (as env): ${{ env.OUTPUT_VAR1 }}"
          echo "OUTPUT_VAR2 (as env): ${{ env.OUTPUT_VAR2 }}"
          
          echo "Outputs:"
          echo "OUTPUT_VAR1: ${{ steps.export_test.outputs.OUTPUT_VAR1 }}"
          echo "OUTPUT_VAR2: ${{ steps.export_test.outputs.OUTPUT_VAR2 }}"

      - name: Test Complex JSON with Multiple Levels
        id: complex_json
        uses: ./
        with:
          env_key: COMPLEX_CONFIG|API_SETTINGS
          env_value: '{"server":{"host":"example.com","port":8080},"auth":{"enabled":true,"methods":["oauth","basic"]},"limits":{"requests":1000,"rate":100}}|{"endpoints":[{"name":"users","path":"/api/users"},{"name":"products","path":"/api/products"}],"version":"2.0"}'
          output_key: complex_output|api_output
          output_value: '{"server":{"host":"example.com","port":8080},"auth":{"enabled":true,"methods":["oauth","basic"]},"limits":{"requests":1000,"rate":100}}|{"endpoints":[{"name":"users","path":"/api/users"},{"name":"products","path":"/api/products"}],"version":"2.0"}'
          
          # 구분자 변경
          delimiter: '|'
          
          # 고급 기능 활성화
          json_support: true
          # 접두사 없음으로 설정
          group_prefix: ''
          
          # 기타 옵션
          debug_mode: true

      - name: Verify Complex JSON Processing
        run: |
          echo "Environment Variables from Complex JSON:"
          echo "COMPLEX_CONFIG: ${{ env.COMPLEX_CONFIG }}"
          echo "COMPLEX_CONFIG_server_host: ${{ env.COMPLEX_CONFIG_server_host || 'Not Set' }}"
          echo "COMPLEX_CONFIG_server_port: ${{ env.COMPLEX_CONFIG_server_port || 'Not Set' }}"
          echo "COMPLEX_CONFIG_auth_enabled: ${{ env.COMPLEX_CONFIG_auth_enabled || 'Not Set' }}"
          echo "COMPLEX_CONFIG_limits_requests: ${{ env.COMPLEX_CONFIG_limits_requests || 'Not Set' }}"
          
          echo "API_SETTINGS: ${{ env.API_SETTINGS }}"
          echo "API_SETTINGS_endpoints_0_name: ${{ env.API_SETTINGS_endpoints_0_name || 'Not Set' }}"
          echo "API_SETTINGS_endpoints_1_path: ${{ env.API_SETTINGS_endpoints_1_path || 'Not Set' }}"
          echo "API_SETTINGS_version: ${{ env.API_SETTINGS_version || 'Not Set' }}"

      # 자세한 JSON 테스트 추가
      - name: Test Detailed JSON Parsing
        id: json_detail_test
        uses: ./
        with:
          env_key: USER_INFO
          env_value: '{"id":12345,"name":"John Doe","email":"john@example.com","roles":["admin","user"],"preferences":{"theme":"dark","notifications":true}}'
          output_key: user_data
          output_value: '{"id":12345,"name":"John Doe","email":"john@example.com"}'
          
          # JSON 파싱 옵션
          json_support: true
          group_prefix: ''
          
          # 디버그 모드
          debug_mode: true

      - name: Verify Detailed JSON Parsing
        run: |
          echo "USER_INFO: ${{ env.USER_INFO }}"
          echo "USER_INFO_id: ${{ env.USER_INFO_id || 'Not Set' }}"
          echo "USER_INFO_name: ${{ env.USER_INFO_name || 'Not Set' }}"
          echo "USER_INFO_email: ${{ env.USER_INFO_email || 'Not Set' }}"
          echo "USER_INFO_roles_0: ${{ env.USER_INFO_roles_0 || 'Not Set' }}"
          echo "USER_INFO_preferences_theme: ${{ env.USER_INFO_preferences_theme || 'Not Set' }}"
          
          echo "Output: ${{ steps.json_detail_test.outputs.user_data }}"

      # 스트레스 테스트: 많은 변수와 복잡한 값 처리
      - name: Stress Test with Many Variables
        id: stress_test
        uses: ./
        with:
          env_key: VAR1,VAR2,VAR3,VAR4,VAR5,VAR6,VAR7,VAR8,VAR9,VAR10
          env_value: val1,val2,val3,val4,val5,val6,val7,val8,val9,val10
          output_key: OUT1,OUT2,OUT3,OUT4,OUT5,OUT6,OUT7,OUT8,OUT9,OUT10
          output_value: out1,out2,out3,out4,out5,out6,out7,out8,out9,out10
          
          # 동시에 여러 변환 옵션 활성화
          to_upper: true
          encode_url: true
          max_length: 5
          
          # 디버그 모드 활성화
          debug_mode: true

      - name: Verify Stress Test Results
        run: |
          echo "First few environment variables:"
          echo "VAR1: ${{ env.VAR1 }}"
          echo "VAR5: ${{ env.VAR5 }}"
          echo "VAR10: ${{ env.VAR10 }}"
          
          echo "First few outputs:"
          echo "OUT1: ${{ steps.stress_test.outputs.OUT1 }}"
          echo "OUT5: ${{ steps.stress_test.outputs.OUT5 }}"
          echo "OUT10: ${{ steps.stress_test.outputs.OUT10 }}"
          
          echo "Action Results:"
          echo "Variables Set: ${{ steps.stress_test.outputs.set_env_count }}"
          echo "Outputs Set: ${{ steps.stress_test.outputs.set_output_count }}"

      # 에러 시나리오 테스트
      - name: Test JSON Validation Errors
        id: json_error_test
        uses: ./
        continue-on-error: true
        with:
          env_key: INVALID_JSON
          env_value: '{"incomplete": "json"'
          output_key: invalid_output
          output_value: '{"also": "incomplete'
          
          # 구분자 변경은 필요 없음 (단일 값이므로)
          json_support: true
          fail_on_empty: true
          debug_mode: true

      - name: Check JSON Error Handling
        run: |
          echo "Error Test Results:"
          echo "Status: ${{ steps.json_error_test.outputs.status || 'N/A' }}"
          echo "Error Message: ${{ steps.json_error_test.outputs.error_message || 'None' }}"
          
          if [[ "${{ steps.json_error_test.outcome }}" == "failure" ]]; then
            echo "✅ JSON validation error correctly caused the action to fail"
          else
            echo "❌ JSON validation error didn't cause the action to fail as expected"
            echo "This is likely because JSON validation is handled without enforcing strict schema validation"
          fi